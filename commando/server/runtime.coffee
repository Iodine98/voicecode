@$ = Meteor.npmRequire('NodObjC')
# First you import the "Foundation" framework
$.framework 'Foundation'
$.framework 'Quartz'
$.framework 'AppKit'

# [[[NSWorkspace sharedWorkspace] notificationCenter] addObserver:self selector:@selector(foremostAppActivated:) name:NSWorkspaceDidActivateApplicationNotification object:nil];

w = $.NSWorkspace('sharedWorkspace')
n = w('notificationCenter')
q = $.NSOperationQueue('mainQueue')
# s = $.NSSelectorFromString($())
callback = ->
  console.log "yoyoyoyo"

wrapped = $(callback, $.NSObject)

AppDelegate = $.NSObject.extend('AppDelegate')
# obj = $.NSObject('alloc')('init')

AppDelegate.addMethod 'applicationChanged:', 'v@:@', (notif) ->
  console.log('got applicationDidFinishLauching')
  console.log(notif)

AppDelegate.register()
delegate = AppDelegate('alloc')('init')
# n('addObserverForName', $.NSWorkspaceDidActivateApplicationNotification, 'object', null, 'queue', q, 'usingBlock', wrapped)

# n('addObserver', delegate, 'selector', 'applicationChanged', 'name', $('NSWorkspaceDidActivateApplicationNotification'), 'object', null )


# Setup the recommended NSAutoreleasePool instance
# pool = $.NSAutoreleasePool('alloc')('init')
# NSStrings and JavaScript Strings are distinct objects, you must create an
# NSString from a JS String when an Objective-C class method requires one.
# string = $.NSString('stringWithUTF8String', 'Hello Objective-C World!')

# Print out the contents (toString() ends up calling [string description])

  

# Meteor.setTimeout ->
#   scrollUp()
# , 2000


# pool 'drain'

# eventHandler = $.NSEvent('addGlobalMonitorForEventsMatchingMask', $.NSMouseMovedMask, 'handler', )

# eventHandler = [NSEvent addGlobalMonitorForEventsMatchingMask:NSMouseMovedMask handler:^(NSEvent * mouseEvent) {
#   NSLog(@"Mouse moved: %@", NSStringFromPoint([mouseEvent locationInWindow]));
# }];



# $.framework('Cocoa')

# app = $.NSApplication('sharedApplication')


# AppDelegate = $.NSObject.extend('AppDelegate')

# AppDelegate.addMethod 'applicationDidFinishLaunching:', 'v@:@', (self, _cmd, notif) ->
#   systemStatusBar = $.NSStatusBar('systemStatusBar')
#   statusMenu = systemStatusBar('statusItemWithLength', $.NSVariableStatusItemLength)
#   statusMenu('retain')
#   title = $.NSString('stringWithUTF8String', "Hello World")
#   statusMenu('setTitle', title)

# AppDelegate.register()

# delegate = AppDelegate('alloc')('init')
# app('setDelegate', delegate)

# app('activateIgnoringOtherApps', true)
# app('run')

# pool('release')
@Actions = new OSX.Actions()

# server = http.createServer()
# server.listen '/var/tmp/voicecode.sock'

# server.on "request", ->
#   console.log "booom"
#   console.log 

net = Meteor.npmRequire("net")
fs = Meteor.npmRequire("fs")
socketPath = "/tmp/voicecode.sock"

serverHandler = Meteor.bindEnvironment (localSerialConnection) ->
  localSerialConnection.on 'data', commandHandler

commandHandler = Meteor.bindEnvironment (data) ->
  body = data.toString('utf8')
  console.log body
  phrase = body.replace("\n", "")
  switch phrase.substring(0, 7)
    when "SLCTXT:"
      selected = phrase.slice(7)
      console.log "selected text: #{selected}"
      if Commands.incomingSelectionHandler
        if selected.trim().length
          transformed = Commands.incomingSelectionHandler(selected)
          console.log transformed
          Actions.string transformed
    else
      chain = new Commands.Chain(phrase + " ")
      results = chain.execute(true)
  # data is a buffer from the socket

fs.stat socketPath, (err) ->
  if !err
    fs.unlinkSync socketPath
  unixServer = net.createServer serverHandler
  unixServer.listen socketPath

# ---
# generated by js2coffee 2.0.3

# client = net.createConnection("/tmp/voicecode")

# client.on "connect", ->
#   console.log "connected"

# client.on "data", (data) ->
#   console.log "dataaaaaa"
#   console.log data